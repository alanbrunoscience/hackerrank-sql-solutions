DELIMITER $$

CREATE PROCEDURE print_pattern()
BEGIN
    DECLARE counter INT DEFAULT 20;

    WHILE counter > 0 DO
        SELECT REPEAT('* ', counter);
        SET counter = counter - 1;
    END WHILE;
END $$

DELIMITER ;

CALL print_pattern();

/* 
 
 ExplicaÃ§Ã£o:
 
 ----
 
 ðŸ“Œ O que sÃ£o Procedures no MySQL?
 
 Procedures (ou Stored Procedures) sÃ£o como funÃ§Ãµes armazenadas no banco de dados.
 Ou seja, em vez de escrever um SQL manualmente toda vez, vocÃª cria um bloco de cÃ³digo SQL com lÃ³gica (loops, condiÃ§Ãµes, variÃ¡veis etc.) e o guarda dentro do banco. Depois pode chamar esse cÃ³digo sempre que quiser.
 
 ----
 
 1. 'DELIMITER $$': 
 
 â†’ Por padrÃ£o o MySQL usa ';' como terminador de instruÃ§Ã£o. Ao criar procedures vocÃª precisa usar ';' dentro do corpo da procedure;
 â†’ Mudamos o delimitador para '$$' para que o MySQL nÃ£o trate os ';' internos como fim do 'CREATE PROCEDURE'. Assim o 'CREATE PROCEDURE ... END $$' sÃ³ termina quando encontra '$$'.
 
 2. 'CREATE PROCEDURE print_pattern()': 
 
 â†’ Cria uma procedure chamada 'print_pattern'. Os parÃªnteses '()' indicam que nÃ£o hÃ¡ parÃ¢metros de entrada.
 
 3. 'BEGIN ... END': 
 
 â†’ Delimitam o corpo da procedure â€” onde vÃ£o as declaraÃ§Ãµes e lÃ³gica.
 
 4. 'DECLARE counter INT DEFAULT 20;': 
 
 â†’ Declara uma variÃ¡vel local chamada 'counter' do tipo inteiro e jÃ¡ define o valor inicial '20'. 
 â†’ Essa variÃ¡vel serÃ¡ usada como contador/linha: comeÃ§aremos em 20 e vamos diminuindo atÃ© 1.
 
 5. 'WHILE counter > 0 DO': 
 
 â†’ Inicia um laÃ§o (loop) que se repete enquanto counter for maior que 0.
 
 6. 'SELECT REPEAT('* ', counter);': 
 
 â†’ A cada iteraÃ§Ã£o executa um 'SELECT' que gera uma linha com '* ' repetido counter vezes.
 â†’ 'REPEAT(str, n)' devolve a string 'str' repetida 'n' vezes. Ex.: quando 'counter = 3' => '* * * '.
 
 7. 'SET counter = counter - 1;':
 
 â†’ Decrementa counter. Sem isso o loop seria infinito.
 
 8. 'END WHILE;':
 
 â†’ Fecha o laÃ§o WHILE.
 
 9. 'END $$':
 
 â†’ Fecha o corpo da procedure. Repare que usamos '$$' porque mudamos o delimitador antes.
 
 10. 'DELIMITER ;':
 
 â†’ Restaura o delimitador padrÃ£o ; para o cliente MySQL.
 
 11. 'CALL print_pattern();':
 
 â†’ Executa (invoca) a procedure criada, fazendo com que o loop rode e os SELECT REPEAT(...) sejam executados.
 
 */